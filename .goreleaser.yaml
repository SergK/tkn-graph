# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com
before:
  hooks:
    - make clean
    - go mod tidy

builds:
  - main: ./cmd/graph/main.go
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - windows
      - darwin
    goarch:
      - amd64
      - arm64
      - s390x
      - ppc64le
    mod_timestamp: "{{ .CommitTimestamp }}"
    flags:
      # trims path
      - -trimpath
    ldflags:
      # use commit date instead of current date as main.date
      # only needed if you actually use those things in your main package, otherwise can be ignored.
      - -s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{ .CommitDate }}

archives:
  - name_template: >-
      {{- .Binary }}_
      {{- .Version }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else if eq .Arch "arm64" }}aarch64
      {{- else }}{{ .Arch }}{{ end }}
    format_overrides:
      - goos: windows
        format: zip

checksum:
  name_template: "checksums.txt"

snapshot:
  name_template: "{{ incpatch .Version }}-snapshot"

changelog:
  use: github
  sort: asc
  abbrev: 0
  groups: # Regex use RE2 syntax as defined here: https://github.com/google/re2/wiki/Syntax.
    - title: "Features"
      regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'
      order: 100
    - title: "Bug fixes"
      regexp: '^.*?fix(\([[:word:]]+\))??!?:.+$'
      order: 200
    - title: "Documentation"
      regexp: '^.*?docs(\([[:word:]]+\))??!?:.+$'
      order: 300
    - title: "Dependency updates"
      regexp: '^.*?(feat|fix|chore)\(deps?.+\)!?:.+$'
      order: 400
    - title: "Routine"
      regexp: '^.*?chore(\([[:word:]]+\))??!?:.+$'
      order: 500
    - title: "Other work"
      order: 999
  filters:
    exclude:
      - "^docs:"
      - "^test:"
      - Merge pull request
      - Merge branch

release:
  name_template: "v{{ .Version }}"
  github:
    owner: Sergk
    name: tkn-graph

brews:
  - name: tkn-graph
    repository:
      owner: sergk
      name: homebrew-tap
    folder: Formula
    homepage: "https://github.com/sergk/tkn-graph"
    license: Apache-2.0
    description: Tekton CLI - The command line interface for Pipeline, PipelineRun presentation in Graph
    test: |
      system "#{bin}/tkn-graph", "--help"
    install: |
      bin.install_symlink "tkn" => "kubectl-tkn-graph"
      bin.install "tkn-graph" => "tkn-graph"
      output = Utils.popen_read("SHELL=bash #{bin}/tkn-graph completion bash")
      (bash_completion/"tkn-graph").write output
      output = Utils.popen_read("SHELL=zsh #{bin}/tkn-graph completion zsh")
      (zsh_completion/"_tkn-graph").write output
      prefix.install_metafiles

# signs the checksum file
# all files (including the sboms) are included in the checksum, so we don't need to sign each one if we don't want to
# https://goreleaser.com/customization/sign
signs:
  - cmd: gpg
    artifacts: checksum
    output: true

# create a source tarball
# https://goreleaser.com/customization/source/
source:
  enabled: true

# creates SBOMs of all archives and the source tarball using syft
# https://goreleaser.com/customization/sbom
sboms:
  - artifacts: archive
  - id: source # Two different sbom configurations need two different IDs
    artifacts: source

announce:
  skip: true
# modelines, feel free to remove those if you don't want/use them:
# yaml-language-server: $schema=https://goreleaser.com/static/schema-pro.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj
